/**
 * SimulationConfig.ts - Configuration globale de la simulation Kite
 *
 * R√¥le :
 *   - D√©finit tous les param√®tres physiques, a√©rodynamiques, g√©om√©triques et environnementaux
 *   - Sert de source unique de v√©rit√© pour les r√©glages du monde virtuel
 *   - Permet d'ajuster le comportement du kite, du vent, des lignes, etc.
 *
 * D√©pendances principales :
 *   - KiteGeometry.ts : Utilis√© pour la surface et les points du kite
 *   - Utilis√© par tous les modules physiques et de rendu
 *
 * Relation avec les fichiers adjacents :
 *   - PhysicsConstants.ts : D√©finit les limites et tol√©rances physiques
 *   - KiteGeometry.ts : D√©finit la g√©om√©trie du kite
 *   - Tous les modules du projet importent SimulationConfig pour acc√©der aux param√®tres
 *
 * Utilisation typique :
 *   - Import√© dans tous les modules pour acc√©der aux r√©glages
 *   - Sert √† personnaliser la simulation (test, debug, tuning)
 *
 * Voir aussi :
 *   - src/simulation/config/PhysicsConstants.ts
 *   - src/simulation/config/KiteGeometry.ts
 */
import * as THREE from "three";
import { KiteGeometry } from "./KiteGeometry";

/**
 * Configuration √©pur√©e de la simulation
 *
 * Les r√©glages de notre monde virtuel - comme les r√®gles d'un jeu
 * Vous pouvez changer ces valeurs pour voir comment le cerf-volant r√©agit
 */
export const CONFIG = {
  physics: {
    gravity: 9.81, // La gravit√© terrestre (fait tomber les objets)
    airDensity: 1.225, // Densit√© de l'air (l'air √©pais pousse plus fort)
    deltaTimeMax: 0.016, // Mise √† jour max 60 fois par seconde (pour rester fluide)
    // Damping coefficients (en 1/s) - appliqu√©s avec formule exponentielle
    linearDampingCoeff: 2.5, // üîß PHASE 2: Augment√© (0.15 ‚Üí 2.5) pour friction r√©aliste ~4%/frame
    // Angular damping : UN SEUL m√©canisme (angular drag proportionnel √† œâ)
    angularDragFactor: 0.5, // üîß PHASE 2: R√©duit (2.0 ‚Üí 0.5) pour rotation moins frein√©e
  },
  aero: {
    liftScale: 2.0, // üîß PHASE 1: Augment√© (√ó2) pour compenser masse doubl√©e
    dragScale: 1.5, // üîß PHASE 1: Augment√© (√ó1.5) pour √©quilibre forces
  },
  kite: {
    // Masse et inertie calcul√©es AUTOMATIQUEMENT depuis la g√©om√©trie
    // Bas√©es sur:
    // - Frame carbone (spine 5mm, leading edges 5mm, struts 4mm)
    // - Tissu ripstop nylon 120 g/m¬≤ (corrig√© pour atteindre masse r√©aliste)
    // - Accessoires (connecteurs, bridage, renforts)
    // Voir KiteGeometry.calculateTotalMass() pour les d√©tails
    mass: KiteGeometry.TOTAL_MASS, // kg - Calcul√©e automatiquement (~0.31 kg apr√®s correction)
    area: KiteGeometry.TOTAL_AREA, // m¬≤ - Surface totale (calcul√©e automatiquement)
    inertia: KiteGeometry.INERTIA, // kg¬∑m¬≤ - Moment d'inertie (I ‚âà m¬∑r¬≤, calcul√© automatiquement)
    minHeight: 0, // m - Altitude minimale (plus haut pour √©viter le sol)
  },
  lines: {
    defaultLength: 15, // m - Longueur par d√©faut
    stiffness: 1200, // N/m - Rigidit√© r√©duite pour plus de souplesse (2200 √©tait trop rigide)
    preTension: 75, // N - Tension minimale toujours pr√©sente
    maxTension: 800, // N - Tension max avant rupture (~80% charge nominale)
    dampingCoeff: 0.05, // Coefficient d'amortissement interne (0-1)
    linearMassDensity: 0.0005, // kg/m - Masse lin√©ique pour calcul cat√©naire
  },
  wind: {
    defaultSpeed: 20, // km/h
    defaultDirection: 0, // degr√©s
    defaultTurbulence: 0.001, // % - Turbulence minimale
    turbulenceScale: 0.05,
    turbulenceFreqBase: 0.05,
    turbulenceFreqY: 0.3,
    turbulenceFreqZ: 0.3,
    turbulenceIntensityXZ: 0.2,
    turbulenceIntensityY: 0.2,
  },
  rendering: {
    shadowMapSize: 2048,
    antialias: true,
    fogStart: 100,
    fogEnd: 1000,
  },
  debugVectors: true, // Active ou d√©sactive l'affichage des vecteurs de debug
  controlBar: {
    width: 0.6, // m - Largeur de la barre
    position: new THREE.Vector3(0, 1.2, 8), // Position initiale
  },
};