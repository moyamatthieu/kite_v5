/**
 * Config.ts - Configuration centralis√©e de la simulation
 * 
 * Ce fichier centralise TOUTES les constantes physiques et param√®tres de configuration.
 * Aucun nombre "magique" ne doit se trouver dans le code m√©tier.
 * 
 * Structure :
 * 1. Constantes physiques universelles
 * 2. G√©om√©trie et masse du kite
 * 3. Syst√®mes de contrainte (bridles et lignes)
 * 4. A√©rodynamique
 * 5. Conditions environnementales
 * 6. Initialisation et simulation
 * 7. Rendu et interface
 * 8. Debug et logging
 */

import * as THREE from 'three';

// ============================================================================
// üåç CONSTANTES PHYSIQUES UNIVERSELLES
// ============================================================================

namespace PhysicsConstants {
  /** Acc√©l√©ration due √† la gravit√© (m/s¬≤) - Niveau mer, 45¬∞ latitude */
  export const GRAVITY = 9.81;

  /** Densit√© de l'air standard (kg/m¬≥) - Niveau mer, 15¬∞C */
  export const AIR_DENSITY = 1.225;

  // ============================================================================
  // PBD (Position-Based Dynamics) - Param√®tres optimis√©s
  // ============================================================================

  /** Nombre d'it√©rations PBD pour convergence (10-20 recommand√©) */
  export const PBD_ITERATIONS = 20;

  /** Compliance PBD (inverse de rigidit√©): Œ± = 1/k
   * Œ± = 0     ‚Üí infiniment rigide (hard constraint)
   * Œ± = 0.001 ‚Üí tr√®s rigide (k ‚âà 1000)
   * Œ± = 0.01  ‚Üí rigide (k ‚âà 100)
   * Œ± = 0.1   ‚Üí souple (k ‚âà 10)
   *
   * Pour lignes de kite: quasi-rigide (hard constraint)
   */
  export const PBD_COMPLIANCE = 0.001;

  /** Correction max PBD par frame (m) - S√©curit√© anti-divergence */
  export const PBD_MAX_CORRECTION = 0.5;

  /** Facteur d'amortissement angulaire PBD (0-1)
   * 0.95 = 5% damp par frame
   * 0.98 = 2% damp par frame (plus stable)
   * 0.99 = 1% damp par frame (minimal)
   */
  export const PBD_ANGULAR_DAMPING = 0.98;

  /** Lambda max pour PBD : limite stricte pour √©viter divergence */
  export const PBD_MAX_LAMBDA = 1000;

  /** Epsilon pour calculs num√©riques (√©vite division par z√©ro) */
  export const EPSILON = 1e-6;

  /** Position du sol (m) - Y = 0 dans Three.js */
  export const GROUND_Y = 0;

  /** Vitesse angulaire minimale au carr√© pour int√©gration rotation */
  export const MIN_ANGULAR_VELOCITY_SQ = 0.0001;

  /** Facteur pour int√©gration Euler semi-implicite */
  export const SEMI_IMPLICIT_SCALE = 0.5;
}

// ============================================================================
// üîó CONTRAINTES (LIGNES ET BRIDLES)
// ============================================================================

namespace ConstraintConfig {
  /** Tether line tensile stiffness (N/m)
   * 
   * BALANCE: Inextensible (no visible stretch) but STABLE (no chaos)
   * 
   * Physics principle:
   * - Dyneema rope (realistic): EA ‚âà 120,000-200,000 N for 15m line
   * - This gives: k = EA / L ‚âà 8,000-13,000 N/m (too high causes instability!)
   * - At 1cm excess ‚Üí would be 80-130N ‚Üí TOO MUCH for 0.12kg kite
   * 
   * PRACTICAL INEXTENSIBLE MODE (moderate stiffness):
   * - k = 3,500 N/m (moderate-high rigidity, stable)
   * - At 1mm excess ‚Üí 3.5N (gentle initial restraint)
   * - At 1cm excess ‚Üí 35N (good catch power, not explosive)
   * - At 5cm excess ‚Üí 175N (max realistic catch on 0.12kg kite)
   * 
   * ‚úÖ BALANCED: Strong enough to prevent stretching, gentle enough to stay stable
   */
  export const LINE_STIFFNESS = 3500; // Moderate-high rigidity for inextensible+stable behavior

  /** Position-based projection factor (0.0-1.0)
   * 
   * @deprecated Not used in current force-based implementation
   * 
   * This was used in PBD mode for direct position correction.
   * Current implementation uses explicit forces instead.
   */
  export const PBD_PROJECTION_FACTOR = 0.3;

  /** Longitudinal damping coefficient (N¬∑s/m - absolute damping)
   * 
   * With INEXTENSIBLE mode (moderate stiffness), damping becomes MORE important.
   * It acts as a shock absorber for sudden jerks when line goes taut.
   * 
   * INCREASED damping helps stability:
   * - At v_radial = 1 m/s ‚Üí damping force = 5N (good shock absorption)
   * - At v_radial = 10 m/s ‚Üí damping force = 50N (strong damping, prevents jerk)
   * - Total force = spring (35N @ 1cm) + damping (up to 50N) = reasonable
   * 
   * Physical interpretation:
   * - Real cables have significant damping from air + fiber friction
   * - Dyneema is slippery but still has ~3-5% damping ratio
   * - Higher damping = smoother transitions, less violent motion
   * 
   * ‚ö†Ô∏è CHANGED: 0.5 ‚Üí 5.0 N¬∑s/m (10√ó increase for stability)
   */
  export const ABSOLUTE_DAMPING = 5.0; // Increased for shock absorption + stability
  
  /** @deprecated Use ABSOLUTE_DAMPING instead */
  export const PBD_DAMPING = 0.04;

  /** Nombre d'it√©rations de r√©solution PBD par frame 
   * Plus d'it√©rations = meilleure convergence mais plus co√ªteux
   * 3-5 it√©rations suffisent g√©n√©ralement pour des contraintes rigides
   */
  export const PBD_ITERATIONS = 5;

  /** Coefficient de stabilisation Baumgarte (0.05-0.2) 
   * @deprecated Non utilis√© en mode inextensible pur
   */
  export const BAUMGARTE_COEF = 0.1;

  /** Limite de s√©curit√© pour les forces de contrainte (N)
   * 
   * CRITICAL: Prevents cascading instabilities from line tensions.
   * 
   * With LINE_STIFFNESS=3500 N/m and realistic kite:
   * - 0.12kg kite ‚Üí weight = 1.2N, so max line force should be ~50-100N
   * - Higher forces cause violent rotations and aerodynamic chaos
   * - Too high ceiling (1000N) causes kite to spin uncontrollably
   * 
   * SAFETY LIMIT for inextensible+stable mode:
   * - MAX_CONSTRAINT_FORCE = 150N (strong enough to hold line, not violent)
   * - At 1cm excess: F = 35N (well below limit, stable)
   * - At 4cm excess: F = 140N (approaching limit, realistic catch)
   * - Above 4cm: force clipped to 150N (hard limit to prevent chaos)
   * 
   * ‚ö†Ô∏è CHANGED: 1000 ‚Üí 150N (reduce 7√ó to prevent cascade instabilities)
   */
  export const MAX_CONSTRAINT_FORCE = 150; // Safety limit to prevent chaos

  /** Limite d'√©longation maximale (% de longueur au repos)
   * 
   * INEXTENSIBLE MODE: Lines should almost NOT STRETCH at all.
   * Beyond this limit, the line is considered broken or unstable.
   * 
   * Reality check:
   * - Dyneema under normal load: ~0.5-1% elastic stretch
   * - Safety factor: Allow max 0.1% (1.5cm on 15m line)
   * - This creates immediate restraint with minimal visible deformation
   * 
   * With LINE_STIFFNESS=15000 N/m at 0.1% excess:
   *   ‚Ä¢ 15cm elongation on 15m line ‚Üí F = 15000 √ó 0.15 = 2250N (strong!)
   *   ‚Ä¢ 1.5cm elongation on 15m line ‚Üí F = 15000 √ó 0.015 = 225N (good balance)
   * 
   * ‚ö†Ô∏è CHANGED: 0.002 (2%) ‚Üí 0.001 (0.1%)
   *    Prevents visible stretching while maintaining realistic tension.
   */
  export const MAX_ELONGATION_RATIO = 0.001; // 0.1% - Inextensible behavior

  /** Force minimale pour consid√©rer une ligne tendue (N)
   * 
   * Below this threshold, the line is considered slack.
   * With high stiffness (15000 N/m), even tiny extensions generate
   * meaningful forces, so this threshold is LOWER.
   * 
   * Physical interpretation:
   * - At 0.1mm excess on inextensible line: F = 15000 √ó 0.0001 = 1.5N
   * - This is already significant restraint, so MIN_TAUT_FORCE can be lower
   * - Prevents micro-oscillations at the slack/taut boundary
   * 
   * ‚ö†Ô∏è CHANGED: 0.1 ‚Üí 0.5N (higher threshold, more stable)
   *    With high stiffness, even 0.5N means immediate strong restraint.
   */
  export const MIN_TAUT_FORCE = 0.5; // Reduced from 1.0 for inextensible mode
}

// ============================================================================
// üé® CONSTANTES VISUELLES ET RENDU
// ============================================================================

namespace VisualConstants {
  /** Seuil de recr√©ation g√©om√©trie ligne (m) */
  export const LINE_GEOMETRY_UPDATE_THRESHOLD = 0.01;

  /** Rayon des tubes de ligne (m) */
  export const LINE_TUBE_RADIUS = 0.003;

  /** Segments radiaux des tubes */
  export const LINE_TUBE_SEGMENTS = 8;

  /** Couleur verte (poign√©e droite) */
  export const COLOR_GREEN = 0x00ff00;

  /** Couleur rouge (poign√©e gauche) */
  export const COLOR_RED = 0xff0000;

  /** Diam√®tre cylindre barre (m) */
  export const BAR_CYLINDER_DIAMETER = 0.015;

  /** Diam√®tre sph√®re poign√©e (m) */
  export const HANDLE_SPHERE_DIAMETER = 0.035;

  /** Segments sph√®re poign√©e */
  export const HANDLE_SPHERE_SEGMENTS = 16;

  /** Diam√®tre tube bridle (m) */
  export const BRIDLE_TUBE_DIAMETER = 0.003;
}

// ============================================================================
// ‚è±Ô∏è CONSTANTES DE SIMULATION
// ============================================================================

namespace SimulationConstants {
  /** Delta time maximal (s) - Cap √† 50ms pour stabilit√© */
  export const MAX_DELTA_TIME = 0.05;

  /** Facteur de conversion millisecondes ‚Üí secondes */
  export const MS_TO_SECONDS = 1000;
}

// ============================================================================
// ü™Å G√âOM√âTRIE ET MASSE DU KITE
// ============================================================================

namespace KiteSpecs {
  // === Masses ===
  /** Masse du kite (kg) - 120g pour ratio r√©aliste */
  export const MASS_KG = 0.12;

  // === Dimensions ===
  /** Envergure (m) */
  export const WINGSPAN_M = 1.65;

  /** Corde (m) - Profondeur moyenne */
  export const CHORD_M = 0.65;

  /** Surface ail√©e (m¬≤) - Calcul√©e : wingspan √ó chord √ó 0.5 (delta triangulaire) */
  export const SURFACE_AREA_M2 = 0.8; // Augment√©e pour plus de portance r√©aliste

  // === Moments d'inertie (kg‚ãÖm¬≤) ===
  // Calcul pr√©cis pour plaque triangulaire delta (120g, 1.65m x 0.65m)
  // Formule: I = m * (a¬≤ + b¬≤) / 24 pour axes principaux
  /** Pitch (rotation avant/arri√®re autour de X) */
  export const INERTIA_XX = 0.0158; // m * (wingspan¬≤ + chord¬≤) / 24

  /** Yaw (rotation gauche/droite autour de Y) */
  export const INERTIA_YY = 0.0136; // m * wingspan¬≤ / 24

  /** Roll (rotation lat√©rale autour de Z) */
  export const INERTIA_ZZ = 0.0158; // m * (wingspan¬≤ + chord¬≤) / 24

  // === Couleur ===
  /** Couleur du kite en RGB hex */
  export const COLOR = 0xff3333; // Rouge

  // === Facteurs g√©om√©triques internes ===
  /** Position Y du centre relatif (25% de la hauteur du nez) */
  export const CENTER_HEIGHT_RATIO = 0.25;

  /** Position relative des points interm√©diaires (75% vers le bas) */
  export const INTERPOLATION_RATIO = 0.75; // = 1.0 - CENTER_HEIGHT_RATIO

  /** Ratio des points de fixation (2/3 vers l'int√©rieur) */
  export const FIX_POINT_RATIO = 2 / 3;

  /** Hauteur relative des whiskers (60% du centre) */
  export const WHISKER_HEIGHT_RATIO = 0.6;

  /** Profondeur des whiskers (arri√®re du kite, m) */
  export const WHISKER_DEPTH_M = 0.20;
}

// ============================================================================
// üõù BRIDLES (Syst√®me de contr√¥le)
// ============================================================================

namespace BridleConfig {
  // === Longueurs ===
  /** Longueur bride nez (m) */
  export const LENGTH_NEZ_M = 0.65;

  /** Longueur bride inter (m) */
  export const LENGTH_INTER_M = 0.65;

  /** Longueur bride centre (m) */
  export const LENGTH_CENTRE_M = 0.65;

  // === Couleur ===
  /** Couleur des bridles en RGB hex */
  export const COLOR = 0xff0000; // Rouge
}

// ============================================================================
// üßµ LIGNES DE VOL
// ============================================================================

namespace LineSpecs {
  // === G√©om√©trie ===
  /** Longueur des lignes (m) */
  export const LENGTH_M = 15;

  /** Tension maximale (N) - ~8√ó poids du kite */
  export const MAX_TENSION_N = 200;

  // === Couleur ===
  /** Couleur des lignes en RGB hex */
  export const COLOR = 0x0000ff; // Bleu

  // === Mode de contrainte ===
  /** Mode : 'pbd' (Position-Based Dynamics) ou 'spring-force' (ressort physique) */
  export const CONSTRAINT_MODE = 'pbd' as const;

  // === Param√®tres Spring-Force ===
  /** Rigidit√© du ressort (N/m) - R√©duit de 500 √† 50 pour stabilit√© */
  export const STIFFNESS_N_PER_M = 500;

  /** Fr√©quence propre : œâ = sqrt(k/m) = sqrt(50/0.12) ‚âà 20 rad/s (~3 Hz) */
  export const EXPECTED_FREQUENCY_HZ = 30;

  /** Amortissement visqueux (N¬∑s/m) */
  export const DAMPING_N_S_PER_M = 50;

  /** Amortissement critique th√©orique ‚âà 4.9 (l√©g√®rement sur-amorti) */
  export const DAMPING_RATIO = 0.7; // L√©g√®rement sur-amorti pour stabilit√©

  /** Force maximale appliqu√©e (N) - ~83√ó poids du kite */
  export const MAX_FORCE_N = 10;
}

// ============================================================================
// üå¨Ô∏è A√âRODYNAMIQUE
// ============================================================================

namespace AeroConfig {
  // === Coefficients physiques de calcul ===
  /** Coefficient de pression dynamique = 0.5 œÅ V¬≤ */
  export const DYNAMIC_PRESSURE_COEFF = 0.5;

  /** Efficacit√© d'Oswald (e) pour profil delta - typiquement 0.8 */
  export const OSWALD_EFFICIENCY = 0.8;

  // === Coefficients de portance (lift) ===
  /** CL √† angle d'attaque z√©ro */
  export const CL0 = 0.0;

  /** dCL/dŒ± (par degr√©) - Valeur r√©aliste pour cerf-volant */
  export const CL_ALPHA_PER_DEG = 0.105;

  /** Angle d'attaque pour portance nulle (deg) - L√©g√®rement n√©gatif pour profil cambr√© */
  export const ALPHA_ZERO_DEG = -2;

  /** Angle d'attaque optimal (deg) - R√©duit pour √©viter d√©crochage */
  export const ALPHA_OPTIMAL_DEG = 12;

  // === Coefficient de tra√Æn√©e (drag) ===
  /** CD √† angle d'attaque z√©ro (tra√Æn√©e parasite) - Augment√©e pour kite */
  export const CD0 = 0.08;

  // === Coefficient de moment ===
  /** CM (moment de tangage) - R√©duit pour moins d'instabilit√© */
  export const CM = -0.05;

  // === Multiplicateurs de tuning (UI) ===
  /** Multiplicateur de portance par d√©faut - Range: [0.0, 2.0] */
  export const LIFT_SCALE_DEFAULT = 1.0;

  /** Multiplicateur de tra√Æn√©e par d√©faut - Range: [0.0, 2.0] */
  export const DRAG_SCALE_DEFAULT = 1.0;

  /** Lissage temporel des forces - Range: [0.0, 1.0] */
  export const FORCE_SMOOTHING = 0.05;
}

// ============================================================================
// üåä CONDITIONS ENVIRONNEMENTALES
// ============================================================================

namespace EnvironmentConfig {
  // === Vent ===
  /** Vitesse du vent par d√©faut (m/s) */
  export const WIND_SPEED_M_S = 5.0;

  /** Direction du vent par d√©faut (degr√©s) - 270 = -Z = Nord */
  export const WIND_DIRECTION_DEG = 270;

  /** Turbulence par d√©faut (%) - Range: [0, 100] */
  export const WIND_TURBULENCE_PERCENT = 0;

  // === Syst√®me de coordonn√©es du vent ===
  // X = droite/gauche, Y = haut/bas, Z = devant/derri√®re
  // Direction 0¬∞ = +X (Est)
  // Direction 90¬∞ = +Z (Sud)
  // Direction 180¬∞ = -X (Ouest)
  // Direction 270¬∞ = -Z (Nord)

  // === Physique g√©n√©rale ===
  /** Damping lin√©aire (r√©duction de v√©locit√©) - Plus fort pour stabilit√© */
  export const LINEAR_DAMPING = 0.5;

  /** Damping angulaire (r√©duction de rotation) - Plus fort pour stabilit√© */
  export const ANGULAR_DAMPING = 0.5;
}

// ============================================================================
// üë§ PILOTE
// ============================================================================

namespace PilotSpecs {
  /** Masse du pilote (kg) - Adulte standard */
  export const MASS_KG = 75;

  /** Hauteur du pilote (m) */
  export const HEIGHT_M = 1.6;

  /** Largeur aux √©paules (m) */
  export const WIDTH_M = 0.5;

  /** Profondeur (m) */
  export const DEPTH_M = 0.3;

  /** Position Y du centre du pilote (m) */
  export const CENTER_Y_M = 0.8;
}

// ============================================================================
// üöÄ INITIALISATION - POSITIONS ET ORIENTATION
// ============================================================================

namespace InitConfig {
  // === Positions initiales ===
  // Syst√®me de coordonn√©es Three.js :
  // X = droite/gauche, Y = haut/bas, Z = devant/derri√®re (vent vient de -Z)

  /** Position Y du pivot de la barre (m) */
  export const CONTROL_BAR_POSITION_Y_M = 1;

  /** Distance avant du pivot (m) - 60cm devant le pilote */
  export const CONTROL_BAR_POSITION_Z_M = -0.6;

  /** Altitude du kite au-dessus de la barre (m) 
   * ‚úÖ CORRIG√â : Kite d√©marre 1m √Ä L'INT√âRIEUR de la sph√®re de vol (14m)
   * Le vent va pousser le kite vers l'arri√®re jusqu'√† tendre les lignes √† 15m
   */
  export const KITE_ALTITUDE_M = 10;

  /** Distance du kite devant la barre (m)
   * Distance 3D = ‚àö(10¬≤ + 10¬≤) = ‚àö200 ‚âà 14.14m < 15m ‚úÖ LIGNES SLACK AU D√âPART
   * √âlongation initiale = 0m (impossible d'avoir √©longation au repos !)
   * Le vent pousse ‚Üí lignes se tendent progressivement ‚Üí kite se stabilise √† 15m
   */
  export const KITE_DISTANCE_M = 10;

  // === Orientation initiale ===
  /** Pitch initial (deg) - Face au vent avec angle d'attaque favorable
   * ‚úÖ AJUST√â √† 15¬∞ pour g√©n√©rer portance imm√©diate au d√©marrage
   */
  export const ORIENTATION_PITCH_DEG = 15;

  /** Yaw initial (deg) */
  export const ORIENTATION_YAW_DEG = 0;

  /** Roll initial (deg) */
  export const ORIENTATION_ROLL_DEG = 0;
}

// ============================================================================
// ‚öôÔ∏è SIMULATION
// ============================================================================

namespace SimulationConfig {
  /** FPS cible */
  export const TARGET_FPS = 60;

  /** Frame time maximal (s) - 1/30 = 33.3ms pour √©viter instabilit√©s */
  export const MAX_FRAME_TIME_S = 1 / 30;

  /** √âchelle de temps (1.0 = vitesse normale, <1 ralenti, >1 acc√©l√©r√©) */
  export const TIME_SCALE = 1.0;

  /** D√©marrer automatiquement au chargement */
  export const AUTO_START = true;
}

// ============================================================================
// üé® RENDU
// ============================================================================

namespace RenderConfig {
  // === Cam√©ra - Position et orientation ===
  /** Position X de la cam√©ra relative au pilote (m) - Permet de voir le kite */
  export const CAMERA_POSITION_X = 13.37;

  /** Position Y de la cam√©ra (hauteur, m) - Permet de voir l'altitude du kite */
  export const CAMERA_POSITION_Y = 11.96;

  /** Position Z de la cam√©ra (profondeur, m) - √âloignement du plan XY */
  export const CAMERA_POSITION_Z = 0.45;

  /** Point vis√© X par la cam√©ra (m) */
  export const CAMERA_LOOKAT_X = -3.92;

  /** Point vis√© Y par la cam√©ra (m) */
  export const CAMERA_LOOKAT_Y = 0;

  /** Point vis√© Z par la cam√©ra (m) */
  export const CAMERA_LOOKAT_Z = -12.33;

  /** Niveau de subdivision du mesh du kite - Range: [0, 4] */
  export const MESH_SUBDIVISION_LEVEL = 0;
}

// ============================================================================
// üîç DEBUG ET LOGGING
// ============================================================================

namespace DebugConfig {
  /** Mode debug activ√© */
  export const ENABLED = true;

  /** Afficher les vecteurs de force */
  export const SHOW_FORCE_VECTORS = true;

  /** Afficher les infos physiques d√©taill√©es */
  export const SHOW_PHYSICS_INFO = false;

  /** Niveau de log: 'debug' | 'info' | 'warn' | 'error' */
  export const LOG_LEVEL = 'info' as const;

  // === Param√®tres de visualisation debug ===
  /** Intervalle de frame pour logging p√©riodique (60 @ 60FPS = 1/sec) */
  export const FRAME_LOG_INTERVAL = 60;

  /** Facteur d'√©chelle pour vecteurs de force */
  export const FORCE_VECTOR_SCALE = 1;

  /** Seuil minimum de force pour afficher (N) */
  export const FORCE_THRESHOLD = 0.001;

  /** Seuil minimum de lift pour afficher (N) */
  export const LIFT_THRESHOLD = 0.0001;

  /** Facteur d'√©chelle du vecteur vent apparent (5%) */
  export const WIND_VECTOR_SCALE = 0.05;

  /** Longueur fixe pour affichage des normales (m) */
  export const NORMAL_DISPLAY_LENGTH = 2.0;

  /** Taille des labels texte (m) */
  export const TEXT_LABEL_SIZE = 0.2;

  // === Force arrow visualization ===
  /** Seuil minimal force pour affichage fl√®che (N) */
  export const MIN_FORCE_ARROW_DISPLAY = 0.01;

  /** Longueur maximale fl√®che force pour visibilit√© (m) */
  export const MAX_FORCE_ARROW_LENGTH = 30;

  // === Canvas de texture pour labels ===
  /** Dimension petit canvas pour labels simples (pixels) */
  export const CANVAS_SMALL_SIZE = 128;

  /** Dimension grand canvas pour labels complexes (pixels) */
  export const CANVAS_LARGE_SIZE = 512;

  /** Position centre petit canvas (= CANVAS_SMALL_SIZE / 2) */
  export const CANVAS_SMALL_CENTER = CANVAS_SMALL_SIZE / 2;

  /** Position centre grand canvas (= CANVAS_LARGE_SIZE / 2) */
  export const CANVAS_LARGE_CENTER = CANVAS_LARGE_SIZE / 2;
}

// ============================================================================
// üñ•Ô∏è INTERFACE UTILISATEUR (UI)
// ============================================================================

namespace UIConfig {
  /** Priorit√© du syst√®me UI dans le pipeline ECS */
  export const PRIORITY = 90;

  /** Pr√©cision d√©cimale pour affichage vitesse (km/h) */
  export const DECIMAL_PRECISION_VELOCITY = 2;

  /** Pr√©cision d√©cimale pour affichage position (m) */
  export const DECIMAL_PRECISION_POSITION = 2;

  /** Pr√©cision d√©cimale pour affichage angles (¬∞) */
  export const DECIMAL_PRECISION_ANGLE = 2;

  /** Facteur de conversion m/s ‚Üí km/h (correction: √©tait 3.6, mais nous utilisons m/s) */
  export const MS_TO_KMH = 3.6;

  /** Seuil minimum de vitesse vent pour affichage AOA (m/s) */
  export const MIN_WIND_SPEED = 0.01;

  /** Base pour calcul fractale triangles (Level N = TRIANGLES_BASE ^ (N+1)) */
  export const TRIANGLES_BASE = 4;
}

// ============================================================================
// üí® SYST√àME DE VENT
// ============================================================================

namespace WindConfig {
  /** Priorit√© du syst√®me Vent dans le pipeline ECS (avant A√©ro qui a priorit√© 30) */
  export const PRIORITY = 20;

  /** Intervalle mise √† jour du vent depuis InputComponent (ms) */
  export const UPDATE_INTERVAL = 100;

  /** Seuil de changement d√©tect√© en vitesse vent (m/s) */
  export const SPEED_CHANGE_THRESHOLD = 0.01;

  /** Seuil de changement d√©tect√© en direction vent (¬∞) */
  export const DIRECTION_CHANGE_THRESHOLD = 0.5;

  /** Seuil de changement d√©tect√© en turbulence (%) */
  export const TURBULENCE_CHANGE_THRESHOLD = 0.1;

  /** Facteur d'amortissement turbulence verticale (0.3 = 30% de l'horizontale) */
  export const VERTICAL_TURBULENCE_FACTOR = 0.3;

  /** Vitesse minimale du vent pour calcul direction normalis√©e (m/s) */
  export const MINIMUM_WIND_SPEED = 0.01;

  /** Vitesse vent par d√©faut au d√©marrage (m/s) - 0 = pas de vent */
  export const DEFAULT_WIND_SPEED_MS = 0.0;

  /** Direction vent par d√©faut au d√©marrage (¬∞) - 0 = +X (Est) */
  export const DEFAULT_WIND_DIRECTION = 0;

  /** Turbulence par d√©faut au d√©marrage (%) */
  export const DEFAULT_TURBULENCE = 10;
}

// ============================================================================
// ‚úàÔ∏è MODES PAR D√âFAUT DE LA SIMULATION
// ============================================================================

namespace SimulationModes {
  /** 
   * Mode a√©rodynamique par d√©faut : 'nasa' ou 'perso' 
   * - 'nasa' : Formules officielles NASA (plaques planes)
   * - 'perso' : Mod√®le personnalis√© (Rayleigh)
   */
  export const AERO_MODE = 'nasa' as const;
}

// ============================================================================
// üéØ VALEURS PAR D√âFAUT POUR INPUTCOMPONENT
// ============================================================================

namespace InputDefaults {
  /** Valeur par d√©faut pour lineLength (m)
   * ‚ö†Ô∏è  Cette valeur doit correspondre √† LineSpecs.LENGTH_M pour coh√©rence
   */
  export const LINE_LENGTH_M = 15;
  
  /** Valeur par d√©faut pour bridleNez (m) */
  export const BRIDLE_NEZ_M = 1.5;
  
  /** Valeur par d√©faut pour bridleInter (m) */
  export const BRIDLE_INTER_M = 2.0;
  
  /** Valeur par d√©faut pour bridleCentre (m) */
  export const BRIDLE_CENTRE_M = 2.5;
  
  /** Valeur par d√©faut pour meshSubdivisionLevel */
  export const MESH_SUBDIVISION_LEVEL = 2;
}

// ============================================================================
// ‚ú® EXPORT DE LA CONFIGURATION PRINCIPALE
// ============================================================================

export const CONFIG = {
  // === KITE ===
  kite: {
    mass: KiteSpecs.MASS_KG,
    wingspan: KiteSpecs.WINGSPAN_M,
    chord: KiteSpecs.CHORD_M,
    surfaceArea: KiteSpecs.SURFACE_AREA_M2,
    inertia: {
      Ixx: KiteSpecs.INERTIA_XX,
      Iyy: KiteSpecs.INERTIA_YY,
      Izz: KiteSpecs.INERTIA_ZZ
    },
    color: KiteSpecs.COLOR
  },

  // === LIGNES ===
  lines: {
    length: LineSpecs.LENGTH_M,
    maxTension: LineSpecs.MAX_TENSION_N,
    color: LineSpecs.COLOR,
    constraintMode: LineSpecs.CONSTRAINT_MODE,
    pbd: {
      iterations: PhysicsConstants.PBD_ITERATIONS,
      compliance: PhysicsConstants.PBD_COMPLIANCE,
      maxCorrection: PhysicsConstants.PBD_MAX_CORRECTION,
      maxLambda: PhysicsConstants.PBD_MAX_LAMBDA,
      angularDamping: PhysicsConstants.PBD_ANGULAR_DAMPING
    },
    springForce: {
      stiffness: LineSpecs.STIFFNESS_N_PER_M,
      damping: LineSpecs.DAMPING_N_S_PER_M,
      maxForce: LineSpecs.MAX_FORCE_N
    }
  },

  // === BRIDES ===
  bridles: {
    nez: BridleConfig.LENGTH_NEZ_M,    // 0.65m = 65cm (correct pour les brides)
    inter: BridleConfig.LENGTH_INTER_M, // 0.65m = 65cm (correct pour les brides)
    centre: BridleConfig.LENGTH_CENTRE_M, // 0.65m = 65cm (correct pour les brides)
    color: BridleConfig.COLOR
  },

  // === A√âRODYNAMIQUE ===
  aero: {
    airDensity: PhysicsConstants.AIR_DENSITY,
    CL0: AeroConfig.CL0,
    CLAlpha: AeroConfig.CL_ALPHA_PER_DEG,
    alpha0: AeroConfig.ALPHA_ZERO_DEG,
    alphaOptimal: AeroConfig.ALPHA_OPTIMAL_DEG,
    CD0: AeroConfig.CD0,
    CM: AeroConfig.CM,
    liftScale: AeroConfig.LIFT_SCALE_DEFAULT,
    dragScale: AeroConfig.DRAG_SCALE_DEFAULT,
    forceSmoothing: AeroConfig.FORCE_SMOOTHING
  },

  // === VENT ===
  wind: {
    speed: EnvironmentConfig.WIND_SPEED_M_S,
    direction: EnvironmentConfig.WIND_DIRECTION_DEG,
    turbulence: EnvironmentConfig.WIND_TURBULENCE_PERCENT
  },

  // === PHYSIQUE ===
  physics: {
    gravity: PhysicsConstants.GRAVITY,
    linearDamping: EnvironmentConfig.LINEAR_DAMPING,
    angularDamping: EnvironmentConfig.ANGULAR_DAMPING
  },

  // === PILOTE ===
  pilot: {
    mass: PilotSpecs.MASS_KG,
    height: PilotSpecs.HEIGHT_M,
    width: PilotSpecs.WIDTH_M,
    depth: PilotSpecs.DEPTH_M
  },

  // === INITIALISATION ===
  initialization: {
    controlBarPosition: new THREE.Vector3(0, InitConfig.CONTROL_BAR_POSITION_Y_M, InitConfig.CONTROL_BAR_POSITION_Z_M),
    kiteAltitude: InitConfig.KITE_ALTITUDE_M,
    kiteDistance: InitConfig.KITE_DISTANCE_M,
    kiteOrientation: {
      pitch: InitConfig.ORIENTATION_PITCH_DEG,
      yaw: InitConfig.ORIENTATION_YAW_DEG,
      roll: InitConfig.ORIENTATION_ROLL_DEG
    }
  },

  // === SIMULATION ===
  simulation: {
    targetFPS: SimulationConfig.TARGET_FPS,
    maxFrameTime: SimulationConfig.MAX_FRAME_TIME_S,
    timeScale: SimulationConfig.TIME_SCALE,
    autoStart: SimulationConfig.AUTO_START
  },

  // === RENDU ===
  render: {
    cameraPosition: new THREE.Vector3(RenderConfig.CAMERA_POSITION_X, RenderConfig.CAMERA_POSITION_Y, RenderConfig.CAMERA_POSITION_Z),
    cameraLookAt: new THREE.Vector3(RenderConfig.CAMERA_LOOKAT_X, RenderConfig.CAMERA_LOOKAT_Y, RenderConfig.CAMERA_LOOKAT_Z),
    meshSubdivision: RenderConfig.MESH_SUBDIVISION_LEVEL
  },

  // === DEBUG ===
  debug: {
    enabled: DebugConfig.ENABLED,
    showForceVectors: DebugConfig.SHOW_FORCE_VECTORS,
    showPhysicsInfo: DebugConfig.SHOW_PHYSICS_INFO,
    logLevel: DebugConfig.LOG_LEVEL
  },

  // === MODES ===
  modes: {
    aero: SimulationModes.AERO_MODE,
    constraint: LineSpecs.CONSTRAINT_MODE
  }
} as const;

// ============================================================================
// üì¶ EXPORTS PUBLICS - Pour utilisation dans les syst√®mes
// ============================================================================

// Exports des namespaces pour acc√®s direct aux constantes sp√©cialis√©es
export {
  PhysicsConstants,
  ConstraintConfig,
  VisualConstants,
  SimulationConstants,
  KiteSpecs,
  BridleConfig,
  LineSpecs,
  AeroConfig,
  EnvironmentConfig,
  PilotSpecs,
  InitConfig,
  SimulationConfig,
  RenderConfig,
  DebugConfig,
  UIConfig,
  WindConfig,
  SimulationModes,
  InputDefaults
};
